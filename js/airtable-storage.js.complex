class Model {
  constructor(data) {
    this.validateSchema(this.schema, data)
    this.data = data
  }

  validateSchema(schema, data, name = this) {
    const dataKeys = Object.keys(data[0])
    if(!schema.every(key => dataKeys.includes(key))) {
      throw new Error(`The API table "${name}" may have changed.
      This application could therefore not function as expected.`)
    }
  }

  get schema() {
    throw new Error(`Schema must be defined for ${this}.`)
  }
}

class Action extends Model {
  get schema() {
    return ['id', 'createdTime', 'Nom', 'Domaine', 'Nb Eleves', 'Type', 'Nom Etablissement']
  }
}

class School extends Model {
  get schema() {
    return ['id', 'appellation_officielle', 'latitude', 'longitude']
  }
}

class Actor extends Model {
  get schema() {
    return ['id', 'createdTime', 'latitude', 'longitude', 'Nom', 'Type', 'Description', 'Code Postal', 'Adresse Postal', 'Actions']
  }
}


class AirtableStorage {
  constructor(apiKey, apiDatabase) {
    this.apiKey = apiKey
    this.apiDatabase = apiDatabase
    this.loaded = false
    this.data = {}
  }

  async load() {
    if(this.loaded) return this.data
    try {
      this.data = {
        schools: (await this.callAPI('Etablissements')).map(o => new School(o)),
        actors: (await this.callAPI('Acteurs Culturels')).map(o => new Actor(o)),
        actions: (await this.callAPI('Actions')).map(o => new Action(o)),
      }
    }
    catch (e) { console.error(e) }
    this.validateSchemas()
    this.loaded = true
    return this.data
  }

  /**
  * Check that the API received expected columns.
  */
  validateSchemas() {
    Object.keys(this.schemas).forEach(table => {
      const dataKeys = Object.keys(this.data[table][0])
      if(!this.schemas[table].every(key => dataKeys.includes(key))) {
        throw new Error(`The API table "${table}" may have changed.
        This application could therefore not function as expected.`)
      }
    })
  }

  async callAPI(table) {
    return fetch(`https://api.airtable.com/v0/${this.apiDatabase}/${table}/?view=Grid%20view`, {
      method: 'GET',
      headers: {Authorization: `Bearer ${atob(this.apiKey)}`},
    })
    .then(r => r.json())
    .then(collection => collection.records.map(row => Object.assign({id: row.id, createdTime: row.createdTime}, row.fields)))
    .catch(console.error.bind(console))
  }
}
